// Generated by CoffeeScript 1.10.0

/**
*
* @File : DefaultStoryFunctions.coffee
*
* @Project : Brightspace StoryBuilder 
*
* @Author : C.J. Morrison
*
* @Since : 2015
*
*
 */


/**
*
*  Class: BSB_Output
*  
*  This class is used to define the BSB_Output namespace containing all the the
*  functionality of the Story Builder output.
*
*
 */

(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.BSB_Output = (function() {

    /**
    * property: _initalizationsCalled
    * True once the HandleInitialization has been called, prevents Initialization from happening twice.
    *
    * Default: 
    *    - false <Boolean>
    *
     */
    var DrawFrame;

    BSB_Output.prototype._initalizationsCalled = void 0;


    /**
    * property: _storyTitle
    * Title of this story used for pdf generation
    *
    * Default: 
    *    - <String>
    *
     */

    BSB_Output.prototype._storyTitle = void 0;


    /**
    * property: _storySceneData
    * json data for the story including the narrative and scene data
    *
    * Default: 
    *    - {} <Object>
    *
     */

    BSB_Output.prototype._storySceneData = void 0;


    /**
    * property: _currentStorySceneData
    * json data from _storySceneData for the current scene 
    *
    * Default: 
    *    - {} <Object>
    *
     */

    BSB_Output.prototype._currentStorySceneData = void 0;


    /**
    * property: _currentSceneNarrative
    * json data from _storySceneData for the current scene 
    *
    * Default: 
    *    - {} <Object>
    *
     */

    BSB_Output.prototype._currentSceneNarrative = void 0;


    /**
    * property: _SCORM_enabled
    * 
    * True is SCORM has been initialized successfully. 
    *
    * Default: 
    *    - false <Boolean>
    *
     */

    BSB_Output.prototype._SCORM_enabled = void 0;


    /**
    * constructor: BSB_Output
    *
    * Defines the defaults of the properties that require a default or constant value.
    * 
    * @param void 0
    * @return void 0
    *
    *
     */

    function BSB_Output() {
      this.ChangePixelBrightness = bind(this.ChangePixelBrightness, this);
      this.ExpandCharacterImage = bind(this.ExpandCharacterImage, this);
      this.HandleNewSpriteReady = bind(this.HandleNewSpriteReady, this);
      this.HandleAltTextPdfReq = bind(this.HandleAltTextPdfReq, this);
      this.HandleAltTextWinClose = bind(this.HandleAltTextWinClose, this);
      this.HandleAltTextWinPop = bind(this.HandleAltTextWinPop, this);
      this.Restart = bind(this.Restart, this);
      this.ChangeStoryScene = bind(this.ChangeStoryScene, this);
      this.RequestPrevBubble = bind(this.RequestPrevBubble, this);
      this.HandleNarrativeClosed = bind(this.HandleNarrativeClosed, this);
      this.HandleNarrativeOpen = bind(this.HandleNarrativeOpen, this);
      this.HandleFirstSpeakerClick = bind(this.HandleFirstSpeakerClick, this);
      this.DestroyStartFlag = bind(this.DestroyStartFlag, this);
      this.HandleFlagStateChange = bind(this.HandleFlagStateChange, this);
      this.SetFlag = bind(this.SetFlag, this);
      this.GetSceneByNSDIndex = bind(this.GetSceneByNSDIndex, this);
      this.HandleSceneInitialization = bind(this.HandleSceneInitialization, this);
      this.HandleInitialization = bind(this.HandleInitialization, this);
      this.SetLangData = bind(this.SetLangData, this);
      this._initalizationsCalled = false;
      this._SCORM_enabled = false;
      this._storyTitle = '';
      return;
    }


    /**
    * method: SetLangData
    *
    * merges the story specific lang data with the engines lang data allowing any lang terms which exist prior to preloading to work.
    *
    * @param void 0
    * @return void 0 
    *
    *
     */

    BSB_Output.prototype.SetLangData = function() {
      var langDat;
      langDat = D2LAdventureEngine.gu_ResourceManager.get('BSB_LangData', 'data');
      D2LAdventureEngine.gu_LanguageData = D2LAdventureEngine.gu_DataManager.mergeObjectData(D2LAdventureEngine.gu_LanguageData, langDat);
    };


    /**
    * method: HandleInitialization
    *
    * This method sets SCORM, and retrieves story data before setting the initial scene with ChangeStoryScene
    *
    * @param void 0
    * @return void 0 
    *
    *
     */

    BSB_Output.prototype.HandleInitialization = function() {
      var altText;
      if (!this._initalizationsCalled) {
        if (pipwerks.SCORM.isAvailable()) {
          this._SCORM_enabled = pipwerks.SCORM.init();
        }
        this._storySceneData = D2LAdventureEngine.gu_CustomVarsManager.GetVar('StorySceneData');
        altText = D2LAdventureEngine.gu_CustomVarsManager.GetVar("AltTextVerstion");
        if (altText && altText !== '') {
          D2LAdventureEngine.gu_StateManager.findComponent('altTextButton').Show();
        }
        this._storyTitle = D2LAdventureEngine.venture._name.valueOf();
        this._currentStorySceneData = this.GetSceneByNSDIndex(0, 0);
        this._initalizationsCalled = true;
        this.ChangeStoryScene(this.GetSceneByNSDIndex(0, 0).GivenID, true);
      }
    };


    /**
    * method: HandleSceneInitialization
    *
    * This method called upon entering a scene this will automatically call HandleFirstSpeakerClick if the first line is not associated with a character
    * otherwise this will find the first speaker, expand it sprite sheet to provide it with mouse states, and build the start here flag, if the scene has not been built before.
    *
    * @param void 0
    * @return void 0 
    *
    *
     */

    BSB_Output.prototype.HandleSceneInitialization = function() {
      var firstSpeakerClick, flagComp, flagHeight, flagWidth, frame, frmDat, i, pComp, pCompID;
      if (this._currentStorySceneData.NarrativesData[0].Speaker === 'Narrative' || this._currentStorySceneData.NarrativesData[0].Speaker === 'Window') {
        this.HandleFirstSpeakerClick();
      } else {
        if (!this._currentStorySceneData.initialized) {
          i = this._currentStorySceneData.StageData.compsOnStage.length - 1;
          while (i >= 0) {
            pCompID = this._currentStorySceneData.StageData.compsOnStage[i].ID;
            pComp = D2LAdventureEngine.gu_StateManager.findComponent(pCompID);
            if (!pComp._initialized) {
              pComp.Update();
            }
            firstSpeakerClick = {
              owner: pComp,
              trigger: 'onclick',
              effects: ['[%js]BSB_Story.HandleFirstSpeakerClick()']
            };
            if (!D2LAdventureEngine.gu_EventManager.CheckEventsExsistance(firstSpeakerClick)) {
              D2LAdventureEngine.gu_EventManager.ReplaceEvent(firstSpeakerClick);
            }
            if (pComp._options.Type === "Button") {
              if (pComp._sprite.spriteSheet.data && pComp._sprite.spriteSheet.data.spriteFrameData) {
                frmDat = pComp._sprite.spriteSheet.data.spriteFrameData[0];
                this.ExpandCharacterImage(pComp._sprite.spriteSheet.data.AssetLocation, this.HandleNewSpriteReady, {
                  x: frmDat[0],
                  y: frmDat[1],
                  width: frmDat[2],
                  height: frmDat[3]
                });
              } else {
                frame = pComp._sprite.spriteSheet.getFrame(0);
                this.ExpandCharacterImage(frame.image.src, this.HandleNewSpriteReady, frame.rect);
              }
            }
            this.SetFlag();
            this._currentStorySceneData.initialized = true;
            i--;
          }
        } else {
          flagComp = void 0;
          if (D2LAdventureEngine.gu_StateManager.findComponent('StartHereFlag_Up_' + this._currentStorySceneData.ID)) {
            flagComp = D2LAdventureEngine.gu_StateManager.findComponent('StartHereFlag_Up_' + this._currentStorySceneData.ID);
          } else if (D2LAdventureEngine.gu_StateManager.findComponent('StartHereFlag_Down_' + this._currentStorySceneData.ID)) {
            flagComp = D2LAdventureEngine.gu_StateManager.findComponent('StartHereFlag_Down_' + this._currentStorySceneData.ID);
          }
          if (flagComp) {
            flagComp.Show();
          }
          flagComp.snapToPixel = false;
          flagWidth = flagComp.groupedComponets[0].getWidth();
          flagHeight = flagComp.getHeight() - 10;
          flagComp.cache(-2, -2, flagWidth + 4, flagHeight + 4, 2);
          this._currentStorySceneData.initialized = true;
        }
      }
    };


    /**
    * method: GetSceneByNSDIndex
    *
    * Retrieves a node from _storySceneData with provided NSDIndex in only firstIdx is provided it will return an array of all nodes with firstIdx
    * 
    * @param firstIdx <Number> - first index number in the NSDIndex
    * @param secondIdx <Number> - second index number in the NSDIndex
    * @return <Object> | <Array> | <Boolean> - the scene(s) of data or false if indexes are not found. 
    *
    *
     */

    BSB_Output.prototype.GetSceneByNSDIndex = function(firstIdx, secondIdx) {
      var i, retArr;
      if (!firstIdx) {
        firstIdx = 0;
      }
      if (secondIdx === void 0) {
        retArr = [];
        i = 0;
        while (i < this._storySceneData.length) {
          if (this._storySceneData[i].NSD_index[0] === firstIdx) {
            retArr.push(this._storySceneData[i]);
          }
          i++;
        }
        return retArr;
      } else {
        i = 0;
        while (i < this._storySceneData.length) {
          if (this._storySceneData[i].NSD_index[0] === firstIdx && this._storySceneData[i].NSD_index[1] === secondIdx) {
            return this._storySceneData[i];
          }
          i++;
        }
      }
      return false;
    };


    /**
    * method: SetFlag
    *
    * Locates the starting flag and begins the Bob tween
    *
    * @param void 0
    * @return void 0 
    *
    *
     */

    BSB_Output.prototype.SetFlag = function() {
      var downFlag, upFlag, usingFlag;
      upFlag = D2LAdventureEngine.gu_StateManager.findComponent('StartHereFlag_Up_' + this._currentStorySceneData.ID);
      downFlag = D2LAdventureEngine.gu_StateManager.findComponent('StartHereFlag_Down_' + this._currentStorySceneData.ID);
      if (upFlag) {
        usingFlag = upFlag;
      } else if (downFlag) {
        usingFlag = downFlag;
      }
      usingFlag.Update();
      D2LAdventureEngine.gu_TweensManager.SetTweenEffects('SH_Bob', {
        'y': '[%num]' + (usingFlag._options.initY + 4)
      });
      D2LAdventureEngine.gu_TweensManager.CallTween('SH_Bob', usingFlag);
      usingFlag.SetZPos('top');
    };


    /**
    * method: HandleFlagStateChange
    *
    * This method is called with mouse and tab events on the "Start Here" flag. 
    * The flag itself acts a button preforming the same function as the character it's pointing to
    * as an interactive it requires a mouse over event to indicate to users it is an interactive.
    * this will alter the color of the flag as well as rebuilding it.
    * 
    * @param state <String> - either "over" or "norm"
    * @return void 0
    *
    *
     */

    BSB_Output.prototype.HandleFlagStateChange = function(state) {
      var flagBGElm, flagComp;
      flagBGElm = D2LAdventureEngine.gu_StateManager.findComponent('FlagBG_body_' + this._currentStorySceneData.ID);
      if (state === 'over') {
        flagBGElm._options.color = '#EFEBEB';
      } else {
        flagBGElm._options.color = '#ffffff';
      }
      flagBGElm.Rebuild();
      flagBGElm = D2LAdventureEngine.gu_StateManager.findComponent('FlagBG_pointerBody_' + this._currentStorySceneData.ID);
      if (state === 'over') {
        flagBGElm._options.color = '#EFEBEB';
      } else {
        flagBGElm._options.color = '#ffffff';
      }
      flagBGElm.Rebuild();
      if (D2LAdventureEngine.gu_StateManager.findComponent('StartHereFlag_Up_' + this._currentStorySceneData.ID)) {
        flagComp = D2LAdventureEngine.gu_StateManager.findComponent('StartHereFlag_Up_' + this._currentStorySceneData.ID);
      } else if (D2LAdventureEngine.gu_StateManager.findComponent('StartHereFlag_Down_' + this._currentStorySceneData.ID)) {
        flagComp = D2LAdventureEngine.gu_StateManager.findComponent('StartHereFlag_Down_' + this._currentStorySceneData.ID);
      }
      flagComp.uncache();
      flagComp.cache(-2, -2, flagComp.getWidth() + 4, flagComp.getHeight() + 4, 2);
    };


    /**
    * method: DestroyStartFlag
    *
    * Hides start here flag.
    * 
    * @param void 0
    * @return <Boolean> - false if flag isn't available
    *
    *
     */

    BSB_Output.prototype.DestroyStartFlag = function() {
      var flagComp;
      if (D2LAdventureEngine.gu_StateManager.findComponent('StartHereFlag_Up_' + this._currentStorySceneData.ID)) {
        flagComp = D2LAdventureEngine.gu_StateManager.findComponent('StartHereFlag_Up_' + this._currentStorySceneData.ID);
      } else if (D2LAdventureEngine.gu_StateManager.findComponent('StartHereFlag_Down_' + this._currentStorySceneData.ID)) {
        flagComp = D2LAdventureEngine.gu_StateManager.findComponent('StartHereFlag_Down_' + this._currentStorySceneData.ID);
      } else {
        return false;
      }
      flagComp.Hide();
      return true;
    };


    /**
    * method: HandleFirstSpeakerClick
    *
    * This calls the first window, narrative or bubble in the current scene. This window will open the next one and so on.
    * this also calls DestroyStartFlag.
    * 
    * @param state <String> - either "over" or "norm"
    * @return void 0
    *
    *
     */

    BSB_Output.prototype.HandleFirstSpeakerClick = function() {
      this.DestroyStartFlag();
      this._currentSceneNarrative = 0;
      D2LAdventureEngine.gu_GUIManager.OpenWindow('Narr_' + this._currentStorySceneData.ID + '_' + this._currentSceneNarrative);
    };


    /**
    * method: HandleNarrativeOpen
    *
    * Called on opening of every window speech bubble and narrative. this will call SCORM complete if this is the final window and SCROM is available.
    * This will also play any audio needed.
    * 
    * @param BubbleIndex <Number> | <String> - can be either the scene index for the line or "endWindow"
    * @return void 0
    *
    *
     */

    BSB_Output.prototype.HandleNarrativeOpen = function(BubbleIndex) {
      var currNarrData;
      currNarrData = this._currentStorySceneData.NarrativesData[BubbleIndex];
      if (this._currentSceneNarrative !== 0 && D2LAdventureEngine.gu_GUIManager.CurrentActiveWindow._NavPrevButton) {
        D2LAdventureEngine.gu_GUIManager.CurrentActiveWindow._NavPrevButton.Show();
      }
      if (currNarrData && currNarrData.Audio) {
        D2LAdventureEngine.gu_SoundManager.play(currNarrData.Audio);
      } else if (!currNarrData) {
        if (this._currentStorySceneData.StorySceneOptions.CloseWindowAudio) {
          D2LAdventureEngine.gu_SoundManager.play(this._currentStorySceneData.StorySceneOptions.CloseWindowAudio);
        }
      }
      if (this._SCORM_enabled && !currNarrData && this._currentStorySceneData.childIDs[0] === null && this._currentStorySceneData.childIDs[1] === null) {
        pipwerks.SCORM.set('cmi.completion_status', 'completed');
      }
    };


    /**
    * method: HandleNarrativeClosed
    *
    * Called on closing of every window speech bubble and narrative, 
    * this removes the black filter, and stops the audio of the previous window. 
    * this then opens the next window or restarts the story
    * 
    * @param BubbleIndex <Number> | <String> - can be either the scene index for the line or "endWindow"
    * @return void 0
    *
    *
     */

    BSB_Output.prototype.HandleNarrativeClosed = function(BubbleIndex) {
      var currNarrData;
      currNarrData = this._currentStorySceneData.NarrativesData[BubbleIndex];
      if (currNarrData && currNarrData.Audio) {
        D2LAdventureEngine.gu_SoundManager.stop(currNarrData.Audio);
      } else if (!currNarrData) {
        if (this._currentStorySceneData.StorySceneOptions.CloseWindowAudio) {
          D2LAdventureEngine.gu_SoundManager.stop(this._currentStorySceneData.StorySceneOptions.CloseWindowAudio);
        }
      }
      if (this._currentSceneNarrative === this._currentStorySceneData.NarrativesData.length) {
        if (this._currentStorySceneData.childIDs[0] === null && this._currentStorySceneData.childIDs[1] === null) {
          this.Restart();
        }
      } else if (this._currentSceneNarrative === parseInt(BubbleIndex)) {
        this._currentSceneNarrative++;
        D2LAdventureEngine.gu_GUIManager.OpenWindow('Narr_' + this._currentStorySceneData.ID + '_' + this._currentSceneNarrative);
      }
    };


    /**
    * method: RequestPrevBubble
    *
    * Called from the previous button in all of the line windows. this will open the previous bubble narrative or window
    * it can not take users to a previous scene.
    * 
    * @param void 0
    * @return void 0
    *
    *
     */

    BSB_Output.prototype.RequestPrevBubble = function() {
      var currNarrData;
      currNarrData = this._currentStorySceneData.NarrativesData[this._currentSceneNarrative];
      if (currNarrData && currNarrData.Audio) {
        D2LAdventureEngine.gu_SoundManager.stop(currNarrData.Audio);
      } else if (!currNarrData) {
        if (this._currentStorySceneData.StorySceneOptions.CloseWindowAudio) {
          D2LAdventureEngine.gu_SoundManager.stop(this._currentStorySceneData.StorySceneOptions.CloseWindowAudio);
        }
      }
      this._currentSceneNarrative--;
      D2LAdventureEngine.gu_GUIManager.OpenWindow('Narr_' + this._currentStorySceneData.ID + '_' + this._currentSceneNarrative);
      if (this._currentSceneNarrative !== 0 && D2LAdventureEngine.gu_GUIManager.CurrentActiveWindow._NavPrevButton) {
        D2LAdventureEngine.gu_GUIManager.CurrentActiveWindow._NavPrevButton.Show();
      }
    };


    /**
    * method: ChangeStoryScene
    *
    * Changes the current scene to to requested one. 
    * 
    * @param targetSceneId <String> - the Scene ID to change the story.
    * @param bypassWinClose <String> - if false close any window which is currently open
    * @return void 0
    *
    *
     */

    BSB_Output.prototype.ChangeStoryScene = function(targetSceneId, bypassWinClose) {
      var currState, i;
      if (!bypassWinClose) {
        D2LAdventureEngine.gu_GUIManager.CurrentActiveWindow.HandleEndWinReq();
        this._currentSceneNarrative = 0;
      }
      i = this._storySceneData.length - 1;
      while (i >= 0) {
        if (this._storySceneData[i].GivenID === targetSceneId) {
          this._currentStorySceneData = this._storySceneData[i];
          i--;
          continue;
        }
        i--;
      }
      currState = D2LAdventureEngine.gu_StateManager.GetCurrStateRef();
      currState.ChangeScene(targetSceneId);
      this.HandleSceneInitialization();
    };


    /**
    * method: Restart
    *
    * sets scene to the initial one, restores the flag comp 
    * 
    * @param void 0
    * @return void 0
    *
    *
     */

    BSB_Output.prototype.Restart = function() {
      var flagComp;
      this.ChangeStoryScene(this.GetSceneByNSDIndex(0, 0).GivenID, true);
      flagComp = void 0;
      if (D2LAdventureEngine.gu_StateManager.findComponent('StartHereFlag_Up_' + this._currentStorySceneData.ID)) {
        flagComp = D2LAdventureEngine.gu_StateManager.findComponent('StartHereFlag_Up_' + this._currentStorySceneData.ID);
      } else if (D2LAdventureEngine.gu_StateManager.findComponent('StartHereFlag_Down_' + this._currentStorySceneData.ID)) {
        flagComp = D2LAdventureEngine.gu_StateManager.findComponent('StartHereFlag_Down_' + this._currentStorySceneData.ID);
      }
      if (flagComp) {
        flagComp.Show();
        flagComp.cache(-2, -2, flagComp.getWidth() + 4, flagComp.getHeight() + 4, 2);
      }
    };


    /**
    * method: HandleAltTextWinPop
    *
    * called when the alt text window is opened. hides the alt text button
    * 
    * @param void 0
    * @return void 0
    *
    *
     */

    BSB_Output.prototype.HandleAltTextWinPop = function() {
      var atBtn;
      atBtn = D2LAdventureEngine.gu_StateManager.findComponent('altTextButton');
      if (atBtn) {
        atBtn.Hide();
      }
    };


    /**
    * method: HandleAltTextWinClose
    *
    * called when the alt text window is closed. shows the alt text button
    * 
    * @param void 0
    * @return void 0
    *
    *
     */

    BSB_Output.prototype.HandleAltTextWinClose = function() {
      var atBtn;
      atBtn = D2LAdventureEngine.gu_StateManager.findComponent('altTextButton');
      if (atBtn) {
        atBtn.Show();
      }
    };


    /**
    * method: HandleAltTextPdfReq
    *
    * called by the alt text window this will generate a pdf alternative.
    * 
    * @param void 0
    * @return void 0
    *
    *
     */

    BSB_Output.prototype.HandleAltTextPdfReq = function() {
      var doc, lines, margin, pdfText, size, verticalOffset;
      if (!jsPDF) {
        D2LAdventurengine.gu_debugManager.log("Error jsPDF not found");
      } else {
        doc = new jsPDF('p', 'in', 'letter');
        doc.setFont('times');
        pdfText = D2LAdventureEngine.gu_CustomVarsManager.GetVar("AltTextVerstion");
        pdfText = this._storyTitle + "\n" + pdfText;
        pdfText = pdfText.replace(/<(?:.|\n)*?>/gm, '');
        pdfText = pdfText.replace(/&nbsp;/g, ' ');
        margin = 0.5;
        verticalOffset = margin;
        size = 12;
        lines = doc.splitTextToSize(pdfText, 7.5);
        doc.text(.5, verticalOffset + size / 72, lines);
        doc.save(this._storyTitle + " - " + (new Date().getTime()) + ".pdf");
      }
    };


    /**
    * method: HandleNewSpriteReady
    *
    * called after a sprite has been expanded the applies the sprite 
    * sheet to the character making it act like a button
    * 
    * @param ssData <Object> - sprite sheet data
    * @return void 0
    *
    *
     */

    BSB_Output.prototype.HandleNewSpriteReady = function(ssData) {
      var pComp, pCompID, spriteData;
      pCompID = this._currentStorySceneData.NarrativesData[0].comp_id;
      pComp = D2LAdventureEngine.gu_StateManager.findComponent(pCompID);
      pComp.Show();
      spriteData = new D2LAdventureEngine.SpriteDataObject({
        AssetID: pComp._options.defName + '_assetSheet',
        AssetLocation: ssData.sheetSrc,
        spriteFrameData: ssData.framesData,
        animationsData: {
          "default": [0, 0, 'norm'],
          norm: [0, 0, 'norm'],
          over: [1, 1, 'over'],
          down: [1, 1, 'down'],
          disabled: [0, 0, 'disabled'],
          hitMask: [0, 0, 'hitMask']
        }
      }, 'button');
      pComp.changeSprite(spriteData);
    };


    /**
    * method: ExpandBackgroundToggle
    *
    * The method is used in the creation toggles tiles such as background tiles and character tiles.
    *
    * @param imageSrc <String> - the src of image which will 
    * @param callback <Function> 
    * @param frameRect <Object> - (optional) Rect data 
    * @return void 0
    *
     */

    BSB_Output.prototype.ExpandCharacterImage = function(imageSrc, callback, frameRect) {
      var imgObj;
      imgObj = document.createElement('img');
      imgObj.crossOrigin = 'anonymous';
      if (window.D2LAdventureEngine.gu_userBrowser === 'IE') {
        imgObj.setAttribute('src', imageSrc + '?_=' + (new Date).getTime());
      } else {
        imgObj.setAttribute('src', imageSrc);
      }
      imgObj.setAttribute('id', 'tempImg');
      imgObj.setAttribute('style', 'visibility: collapse;');
      document.body.appendChild(imgObj);
      imgObj.data = {
        callback: callback,
        frameRect: frameRect,
        framesready: 0
      };
      imgObj.onload = (function(_this) {
        return function(e) {
          var CheckFrameStatus, FrameImageData, PixelData, cnvrtCnvs, ctx, imgRef;
          FrameImageData = [];
          imgObj = e.target;
          imgObj.onload = false;
          cnvrtCnvs = document.createElement('canvas');
          cnvrtCnvs.setAttribute('id', 'tempCan');
          ctx = cnvrtCnvs.getContext('2d');
          cnvrtCnvs.width = imgObj.data.frameRect.width;
          cnvrtCnvs.height = imgObj.data.frameRect.height;
          imgRef = document.getElementById('tempImg');
          if (imgRef.naturalWidth && imgObj.data.frameRect.width > imgRef.naturalWidth) {
            D2LAdventureEngine.gu_debugManager.log('Warning ExpandCharacterImage ' + imgRef.src + ' had a frame width that exceeded the bounds. This woulg crsh IE or Safari.');
            imgObj.data.frameRect.width = imgRef.naturalWidth;
          }
          if (imgRef.naturalHeight && imgObj.data.frameRect.height > imgRef.naturalHeight) {
            D2LAdventureEngine.gu_debugManager.log('Warning ExpandCharacterImage ' + imgRef.src + ' had a frame height that exceeded the bounds. This woulg crsh IE or Safari.');
            imgObj.data.frameRect.height = imgRef.naturalHeight;
          }
          ctx.drawImage(imgRef, imgObj.data.frameRect.x, imgObj.data.frameRect.y, imgObj.data.frameRect.width, imgObj.data.frameRect.height, 0, 0, imgObj.data.frameRect.width, imgObj.data.frameRect.height);
          PixelData = ctx.getImageData(0, 0, imgObj.data.frameRect.width, imgObj.data.frameRect.height);
          FrameImageData.push(String(cnvrtCnvs.toDataURL('image/png')));
          ctx.putImageData(_this.ChangePixelBrightness(PixelData, 40), 0, 0);
          FrameImageData.push(String(cnvrtCnvs.toDataURL('image/png')));
          cnvrtCnvs.width = imgObj.data.frameRect.width * 2;
          ctx.clearRect(0, 0, cnvrtCnvs.width, cnvrtCnvs.height);
          CheckFrameStatus = function() {
            var canRef, retDat;
            if (imgObj.data.framesready === 2) {
              retDat = String(cnvrtCnvs.toDataURL('image/png'));
              canRef = document.getElementById('tempCan');
              if (canRef !== null) {
                document.body.removeChild(canRef);
              }
              imgRef = document.getElementById('tempImg');
              if (imgRef !== null) {
                document.body.removeChild(imgRef);
                imgObj.data.callback({
                  sheetSrc: retDat,
                  framesData: [[0, 0, imgObj.data.frameRect.width, imgObj.data.frameRect.height, 0, 0, 0], [imgObj.data.frameRect.width, 0, imgObj.data.frameRect.width, imgObj.data.frameRect.height, 0, 0, 0]]
                });
              }
            }
          };
          DrawFrame(FrameImageData, 0, ctx, 0, 0, CheckFrameStatus);
          DrawFrame(FrameImageData, 1, ctx, imgObj.data.frameRect.width, 0, CheckFrameStatus);
        };
      })(this);
    };


    /**
    * method: ChangePixelBrightness
    *
    * FROM: http://www.html5rocks.com/en/tutorials/canvas/imagefilters/ 
    * BY: Ilmari Heikkinen
    * under reativecommons.org/licenses/by/3.0/
    *
    * takes pixel data and adjust the brightness
    *
    * @param <Object> - Pixel data to be adjusted
    * @param <Number> - amount to brighten pixels by 
    * @return <Object> pixel data
    *
     */

    BSB_Output.prototype.ChangePixelBrightness = function(pixels, adjustment) {
      var d, i;
      d = pixels.data;
      i = 0;
      while (i < d.length) {
        d[i] += adjustment;
        d[i + 1] += adjustment;
        d[i + 2] += adjustment;
        i += 4;
      }
      return pixels;
    };


    /**
    * method: DrawFrame
    *
    * The method is used in the creation toggles tiles such as background tiles and character tiles.
    *
    * @param FrameImageData <Array> -  base64 data for each frame image which will become the sprite sheet.
    * @param frameindex <Number> - which frame is this
    * @param imageIndex <Number> - which image is this
    * @param ctxRef <CTX> - the ctx of the canvas to draw the frm to
    * @param xloc <Number> - the x posistion of the frame to be drawn
    * @param yloc <Number> - the y posistion of the frame to be drawn
    * @param callback <Function>
    * @return <Object> pixel data
    *
     */

    DrawFrame = function(FrameImageData, frameindex, ctxRef, xloc, yloc, callback) {
      var Frame_imgObj, Frame_imgRef;
      Frame_imgObj = document.createElement('img');
      Frame_imgObj.crossOrigin = 'anonymous';
      if (window.D2LAdventureEngine.gu_userBrowser === 'IE') {
        Frame_imgObj.src = FrameImageData[frameindex] + '?_=' + (new Date).getTime();
      } else {
        Frame_imgObj.src = FrameImageData[frameindex];
      }
      Frame_imgObj.setAttribute('id', 'tempFrameImg' + '_' + frameindex);
      Frame_imgObj.setAttribute('style', 'visibility: collapse;');
      document.body.appendChild(Frame_imgObj);
      Frame_imgRef = document.getElementById('tempFrameImg_' + frameindex);
      if (Frame_imgRef.complete) {
        ctxRef.drawImage(Frame_imgRef, xloc, yloc);
        document.body.removeChild(Frame_imgRef);
        document.getElementById('tempImg').data.framesready++;
        callback();
      } else {
        Frame_imgRef.data = {
          ctxRef: ctxRef,
          xloc: xloc,
          yloc: yloc,
          callback: callback
        };
        Frame_imgRef.onload = function(e) {
          ctxRef.drawImage(e.target, e.target.data.xloc, e.target.data.yloc);
          if (document.getElementById(e.target.id)) {
            document.body.removeChild(document.getElementById(e.target.id));
          }
          document.getElementById('tempImg').data.framesready++;
          e.target.data.callback();
        };
      }
    };

    return BSB_Output;

  })();

  window.BSB_Story = new window.BSB_Output();

}).call(this);
